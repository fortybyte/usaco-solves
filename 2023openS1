#include <bits/stdc++.h>
using namespace std;
#define ll long long
vector<ll> prepos(vector<ll>& nums) {// deal with input and sort arr 
//no problems
    ll n = nums.size();
    vector<pair<ll,ll>> ans (n);
    for (ll i = 0; i < n; i ++) {
        ans[i] = {nums[i],i};
    }
    sort(ans.begin(),ans.end());
    vector<ll> f ( n);
    for (ll i = 0; i < n; i ++) {
        f[ans[i].second] = i;
    }
    return f; 
}
ll searchInsert(vector<ll>& nums, ll target, ll idx) {
        ll l = 0;
        //no problems
        ll r = nums.size()-1;
        while(l<=r){
                ll m=l+(r-l)/2;
                if (nums[m] == target) {
                    if (target >= nums[idx]) return m;
                    else return m+1;
                }
                if(nums[m]<=target) {
                    l= m+1;
                }
                else r=m-1;
        }
        if (target >= nums[idx]) return l-1;
        return l;
    }

ll res(vector<ll>& amt, ll queryindex, ll queryvalue, ll t,vector<ll>& presum) {
    // step 2
    // use prefix sum to find middle diffrence
    
    
    ll newpos = searchInsert(amt,queryvalue,queryindex);
    ll oldproduction = (queryindex+1) * amt[queryindex];
    ll newproduction = queryvalue * (newpos+1);

    ll ct = t - oldproduction + newproduction; // remove the milk from the idx cow
    //cout <<"queryindex:"  << queryindex << " newpos:" << newpos<< " ct:"<< ct << " t:" << t << " old production:" << oldproduction << " newproduction:" << newproduction << ' '<<endl;
    if (newpos < queryindex) {
        //subtract middle 
        
        //add
        ct += presum[queryindex] - presum[newpos];
        // for (ll i = newpos; i < queryindex; i ++) {
        //     ct += amt[i];
            
        // }
        
    } else if (newpos > queryindex) {
        ct -= presum[newpos+1]-presum[queryindex+1];
        //cout << presum[newpos+1]<< ' ' << presum[queryindex+1] << endl;
        // for (ll i = queryindex+1; i < newpos+1; i ++) {
        //     ct -= amt[i];
        //     //cout << amt[i] << ' ' << i << endl;
        // }
        //add 
        //ct += 
    }

    
    
    return ct;
    
    

}
int main() {
    //no problems
	ll n;
    cin >> n;
    vector<ll> amt (n);
    for (ll i = 0; i < n; i ++) {
        cin >> amt[i];
    }
    vector<ll> sortedidx = prepos(amt);
    ll q;
    cin >> q;
    vector<pair<ll,ll>> queries(q);
    for (ll i = 0; i < q; i ++) {
        cin >> queries[i].first >> queries[i].second;
        queries[i].first --;
    }
    sort(amt.begin(),amt.end());
    ll t = 0;
    for (ll i = 0; i < n; i ++) {
        t += (i+1) * amt[i];
    }
    vector<ll> presum (n+1);
    for (ll i = 0; i < n; i ++) {
        presum[i+1] = presum[i] +  amt[i];
    }
    for (ll i = 0; i < q; i ++) {
        ll sortedqueryindex = sortedidx[queries[i].first];
        cout << res(amt,sortedqueryindex,queries[i].second,t,presum) << endl;
        //cout << unsort[i] << ' ';
    }
    return 0;

}
