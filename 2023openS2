#include <bits/stdc++.h>
using namespace std;
#define ll long long
ll hammingWeight(ll n) {
    ll count = 0;
    while (n != 0) {
        count++;
        n &= (n - 1);
    }
    return count;
}

ll diff(ll s1, ll s2) {
	return __builtin_popcount(s1 ^ s2);
}


ll convertStringToInteger( const string& str) {
    ll result = 0;
    for (ll i = 0; i < str.length(); i++) {
        char c = str[i];
        if (c == 'G') {
            result = (result << 1) | 1; // left shift and bitwise OR with 1
        } else if (c == 'H') {
            result = (result << 1) | 0; // left shift and bitwise OR with 0
        }
    }
    return result;
}
ll maxDiff(ll num,const vector<ll>& roster,unordered_map<ll,ll>& mp) {
	if (mp.find(num) != mp.end()) return mp[num]; 
	ll ans = 0;
	for (ll j = 0; j < roster.size(); j ++) {
			ans = max(ans,diff(num,roster[j]));
	}
	mp[num] = ans;
	return ans;
}
int main() {
	ll teams,n;
	cin >> n >> teams;
	vector<string> input (teams);
	for (ll i = 0; i < teams; i ++) {
		cin >> input[i];
	}
	vector<ll> roster (teams);
	for (ll i = 0; i < teams; i ++) {
		roster[i]=(convertStringToInteger(input[i]));
		//cout << roster[i] << endl;
	}
	unordered_map<ll,ll> mp;
	vector<ll> ans (teams);
	for (ll i = 0; i < teams; i ++) {
		ans[i] = maxDiff(roster[i],roster,mp);
	}
	for (auto i : ans) cout << i << endl;
	return 0;
}
